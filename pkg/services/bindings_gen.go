// Code generated by Restify. DO NOT EDIT.

// go:generate restify
// +build !restified

package services

import (
	"context"
	"echo/pkg/models"
	"encoding/json"
	"net/http"
	"strconv"

	"github.com/go-chi/chi"
)

// NewRouter ....
func NewRouter() *chi.Mux {
	mux := chi.NewRouter()

	mux.Post("/contacts", ContactsServiceCreateHandlerFunc(InitContactsService().Create))
	mux.Get("/contacts/{id}", ContactsServiceGetOneHandlerFunc(InitContactsService().GetOne))

	// bind things
	things := InitThingsService()
	mux.Post("/things", ThingsServiceCreateHandlerFunc(things.Create))
	mux.Get("/things/{id}", ThingsServiceGetOneHandlerFunc(things.GetOne))

	mux.Post("/echo", EchoHandlerFunc(Echo))
	return mux
}

type (
	ContactsServiceCreateHandlerType func(ctx context.Context, req *models.ContactRequest) (*models.ContactResponse, error)
	ContactsServiceGetOneHandlerType func(id int) (*models.ContactResponse, error)

	ThingsServiceCreateHandlerType func(req *models.ThingRequest) (*models.ThingResponse, error)
	ThingsServiceGetOneHandlerType func(id int) (*models.ThingResponse, error)

	EchoHandlerType func(req EchoRequest) (EchoResponse, error)
)

func ContactsServiceCreateHandlerFunc(funk ContactsServiceCreateHandlerType) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		contactRequest := &models.ContactRequest{}

		err := json.NewDecoder(req.Body).Decode(contactRequest)
		if err != nil {
			// write error response
			// invalid request error
			panic(err)
		}

		res, err := funk(context.TODO(), contactRequest)
		if err != nil {
			// write error response
			// internal error
			panic(err)
		}

		w.WriteHeader(http.StatusOK)
		w.Header().Set("Content-Type", "text/plain; charset=utf-8")
		err = json.NewEncoder(w).Encode(res)
		if err != nil {
			// write error response
			panic(err)
		}
	}
}

func ContactsServiceGetOneHandlerFunc(funk ContactsServiceGetOneHandlerType) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		id, err := strconv.Atoi(chi.URLParam(req, "id"))
		if err != nil {
			// invalid request error
			panic(err)
		}

		res, err := funk(id)
		if err != nil {
			// write error response
			// internal error
			panic(err)
		}

		w.WriteHeader(http.StatusOK)
		w.Header().Set("Content-Type", "text/plain; charset=utf-8")
		err = json.NewEncoder(w).Encode(res)
		if err != nil {
			// write error response
			panic(err)
		}
	}
}

func ThingsServiceCreateHandlerFunc(funk ThingsServiceCreateHandlerType) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		thingRequest := &models.ThingRequest{}

		err := json.NewDecoder(req.Body).Decode(thingRequest)
		if err != nil {
			// write error response
			// invalid request error
			panic(err)
		}

		res, err := funk(thingRequest)
		if err != nil {
			// write error response
			// internal error
			panic(err)
		}

		w.WriteHeader(http.StatusOK)
		w.Header().Set("Content-Type", "text/plain; charset=utf-8")
		err = json.NewEncoder(w).Encode(res)
		if err != nil {
			// write error response
			panic(err)
		}
	}
}

func ThingsServiceGetOneHandlerFunc(funk ThingsServiceGetOneHandlerType) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		id, err := strconv.Atoi(chi.URLParam(req, "id"))
		if err != nil {
			// invalid request error
			panic(err)

		}

		res, err := funk(id)
		if err != nil {
			// write error response
			// internal error
			panic(err)
		}

		w.WriteHeader(http.StatusOK)
		w.Header().Set("Content-Type", "text/plain; charset=utf-8")
		err = json.NewEncoder(w).Encode(res)
		if err != nil {
			// write error response
			panic(err)
		}
	}
}

func EchoHandlerFunc(funk EchoHandlerType) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		echoRequest := EchoRequest{}

		err := json.NewDecoder(req.Body).Decode(&echoRequest)
		if err != nil {
			// write error response
			// invalid request error
			panic(err)
		}

		res, err := funk(echoRequest)
		if err != nil {
			// write error response
			// internal error
			panic(err)
		}

		w.WriteHeader(http.StatusOK)
		w.Header().Set("Content-Type", "text/plain; charset=utf-8")
		err = json.NewEncoder(w).Encode(res)
		if err != nil {
			// write error response
			panic(err)
		}
	}
}
