// Code generated by Zipline. DO NOT EDIT.

// go:generate zipline
// +build !ziplinegen

package services

import (
	"context"
	"encoding/json"
	"net/http"
	"strconv"

	"github.com/bilal-bhatti/echo/pkg/models"
	"github.com/go-chi/chi"
)

type (
	ServicesContactsServiceCreateType func(context.Context, *models.ContactRequest) (*models.ContactResponse, error)
	ServicesContactsServiceGetOneType func(int) (*models.ContactResponse, error)
	ServicesThingsServiceCreateType   func(*models.ThingRequest) (*models.ThingResponse, error)
	ServicesThingsServiceGetOneType   func(int) (*models.ThingResponse, error)
	ServicesEchoType                  func(EchoRequest) (EchoResponse, error)
)

func NewRouter() *chi.Mux {
	mux := chi.NewRouter()
	mux.Post("/contacts", ServicesContactsServiceCreateHandlerFunc(InitContactsService().Create))
	mux.Get("/contacts/{id}", ServicesContactsServiceGetOneHandlerFunc(InitContactsService().GetOne))
	mux.Post("/things", ServicesThingsServiceCreateHandlerFunc(InitThingsService().Create))
	mux.Get("/things/{id}", ServicesThingsServiceGetOneHandlerFunc(InitThingsService().GetOne))
	mux.Post("/echo", ServicesEchoHandlerFunc(Echo))
	return mux
}

func ServicesContactsServiceCreateHandlerFunc(funk ServicesContactsServiceCreateType) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		var err error // tempory fix

		ctx := ProvideContext(req)

		contactRequest := &models.ContactRequest{}
		err = json.NewDecoder(req.Body).Decode(contactRequest)
		if err != nil {
			// write error response
			// invalid request error
			panic(err)
		}

		result, err := funk(ctx, contactRequest)
		if err != nil {
			// write error response
			// internal error
			panic(err)
		}

		w.WriteHeader(http.StatusOK)
		w.Header().Set("Content-Type", "text/plain; charset=utf-8")
		err = json.NewEncoder(w).Encode(result)
		if err != nil {
			// write error response
			panic(err)
		}
	}
}

func ServicesContactsServiceGetOneHandlerFunc(funk ServicesContactsServiceGetOneType) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		var err error // tempory fix

		id, err := strconv.Atoi(chi.URLParam(req, "id"))
		if err != nil {
			// invalid request error
			panic(err)
		}

		result, err := funk(id)
		if err != nil {
			// write error response
			// internal error
			panic(err)
		}

		w.WriteHeader(http.StatusOK)
		w.Header().Set("Content-Type", "text/plain; charset=utf-8")
		err = json.NewEncoder(w).Encode(result)
		if err != nil {
			// write error response
			panic(err)
		}
	}
}

func ServicesThingsServiceCreateHandlerFunc(funk ServicesThingsServiceCreateType) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		var err error // tempory fix

		thingRequest := &models.ThingRequest{}
		err = json.NewDecoder(req.Body).Decode(thingRequest)
		if err != nil {
			// write error response
			// invalid request error
			panic(err)
		}

		result, err := funk(thingRequest)
		if err != nil {
			// write error response
			// internal error
			panic(err)
		}

		w.WriteHeader(http.StatusOK)
		w.Header().Set("Content-Type", "text/plain; charset=utf-8")
		err = json.NewEncoder(w).Encode(result)
		if err != nil {
			// write error response
			panic(err)
		}
	}
}

func ServicesThingsServiceGetOneHandlerFunc(funk ServicesThingsServiceGetOneType) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		var err error // tempory fix

		id, err := strconv.Atoi(chi.URLParam(req, "id"))
		if err != nil {
			// invalid request error
			panic(err)
		}

		result, err := funk(id)
		if err != nil {
			// write error response
			// internal error
			panic(err)
		}

		w.WriteHeader(http.StatusOK)
		w.Header().Set("Content-Type", "text/plain; charset=utf-8")
		err = json.NewEncoder(w).Encode(result)
		if err != nil {
			// write error response
			panic(err)
		}
	}
}

func ServicesEchoHandlerFunc(funk ServicesEchoType) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		var err error // tempory fix

		echoRequest := EchoRequest{}
		err = json.NewDecoder(req.Body).Decode(&echoRequest)
		if err != nil {
			// write error response
			// invalid request error
			panic(err)
		}

		result, err := funk(echoRequest)
		if err != nil {
			// write error response
			// internal error
			panic(err)
		}

		w.WriteHeader(http.StatusOK)
		w.Header().Set("Content-Type", "text/plain; charset=utf-8")
		err = json.NewEncoder(w).Encode(result)
		if err != nil {
			// write error response
			panic(err)
		}
	}
}
